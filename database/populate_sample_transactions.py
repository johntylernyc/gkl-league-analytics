"""Populate sample transactions for testing incremental updates."""

import sqlite3
from pathlib import Path
from datetime import datetime, timedelta
import random

def populate_sample_transactions():
    """Add sample transactions to the database."""
    
    db_path = Path(__file__).parent / 'league_analytics.db'
    conn = sqlite3.connect(str(db_path))
    cursor = conn.cursor()
    
    # Sample data
    team_keys = ['mlb.l.6966.t.1', 'mlb.l.6966.t.2', 'mlb.l.6966.t.3', 'mlb.l.6966.t.4']
    player_names = ['Mike Trout', 'Shohei Ohtani', 'Ronald Acuna Jr', 'Mookie Betts', 
                    'Aaron Judge', 'Jose Ramirez', 'Freddie Freeman', 'Juan Soto']
    
    transactions = []
    txn_id = 1000
    
    # Generate transactions for the last 7 days
    for days_ago in range(7, -1, -1):
        date = (datetime.now() - timedelta(days=days_ago)).strftime('%Y-%m-%d')
        
        # Generate 2-5 transactions per day
        num_transactions = random.randint(2, 5)
        
        for _ in range(num_transactions):
            txn_type = random.choice(['add', 'drop', 'add', 'drop'])  # More adds/drops than trades
            team_key = random.choice(team_keys)
            player_name = random.choice(player_names)
            player_id = f"mlb.p.{random.randint(10000, 99999)}"
            
            transactions.append((
                f"T{txn_id}",           # transaction_id
                'mlb.l.6966',           # league_key
                2025,                   # season
                date,                   # transaction_date
                txn_type,               # transaction_type
                team_key,               # team_key
                f"Team {team_key[-1]}", # team_name
                player_id,              # player_id
                player_name,            # player_name
                None,                   # from_team_key
                None,                   # to_team_key
                None,                   # content_hash (will be generated by incremental updater)
                'sample_data_001'       # job_id
            ))
            
            txn_id += 1
    
    # Insert transactions
    cursor.executemany("""
        INSERT OR REPLACE INTO league_transactions (
            transaction_id, league_key, season, transaction_date,
            transaction_type, team_key, team_name, player_id, player_name,
            from_team_key, to_team_key, content_hash, job_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, transactions)
    
    conn.commit()
    
    # Report what was added
    cursor.execute("SELECT COUNT(*) FROM league_transactions")
    count = cursor.fetchone()[0]
    
    print(f"[OK] Added {len(transactions)} sample transactions")
    print(f"    Total transactions in database: {count}")
    
    # Show recent transactions
    cursor.execute("""
        SELECT transaction_date, COUNT(*) as txn_count
        FROM league_transactions
        WHERE transaction_date >= date('now', '-7 days')
        GROUP BY transaction_date
        ORDER BY transaction_date DESC
        LIMIT 5
    """)
    
    print("\nRecent transactions by date:")
    for row in cursor.fetchall():
        print(f"    {row[0]}: {row[1]} transactions")
    
    conn.close()


if __name__ == "__main__":
    populate_sample_transactions()